{"version":3,"file":"static/js/888.ea0c953c.chunk.js","mappings":"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","sources":["Components/errorBoundary/ErrorBoundary.js","Components/errorMessage/ErrorMessage.js","Components/comicsList/ComicsList.js","Components/pages/ComicsPage.js","Components/spinner/Spinner.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["// Предохранитель (Error Boundary)\r\n\r\nimport { Component } from \"react\";\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    static getDerivedStateFromError() {\r\n        // Обновите состояние так, чтобы следующий рендер показал запасной интерфейс.\r\n        return { hasError: true }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        console.log(error, info)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // Здесь можно рендерить запасной интерфейс\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt=\"Error message\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = (props) => {\n    const [comicsList, setComicsList] = useState([]);\n    const [offset, setOffset] = useState(0);\n    const [newItemLoading, setNewItemLoading] = useState(true);\n    const [comicsEnded, setComicsEnded] = useState(false)\n\n    const { loading, error, getAllComics } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true)\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        setNewItemLoading(initial ? false : true)\n        getAllComics(offset)\n            .then(getComicsLoaded);\n    }\n\n    const getComicsLoaded = (newComics) => {\n        setComicsList(() => [...comicsList, ...newComics])\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8);\n        setComicsEnded(newComics.lenght < 8);\n\n    }\n\n    function renderItmes(arr) {\n\n        const items = arr.map((item, i) => {\n            const styleImg = item.thumbnail.lastIndexOf(\"image_not_available\") !== -1 ? { objectFit: 'unset' } : { objectFit: 'cover' }\n\n            return (\n                <li\n                    className=\"comics__item\"\n                    key={item.id}\n                    tabIndex={0}\n                    onClick={() => {\n                        props.onComicsSelected(item.id);\n                        // focusOnItem(i);\n                    }}\n                    onKeyDown={e => {\n                        if (e.key === ' ' || e.key === 'Enter') {\n                            e.preventDefault();\n                            props.onComicsSelected(item.id);\n                        }\n                    }}>\n\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} style={styleImg} className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li >\n            )\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItmes(comicsList);\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n    const errorMessage = error ? <ErrorMessage /> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {spinner}\n            {errorMessage}\n            {items}\n            <button\n                className=\"comics__btn button button_main-color button_long\"\n                disabled={newItemLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}\n            >LOAD MORE</button>\n        </div>\n\n    )\n}\n\nexport default ComicsList;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport ComicsList from '../comicsList/ComicsList';\r\n\r\nexport function Component() {\r\n    const [selectedComics, setComics] = useState(null);\r\n\r\n    const onComicsSelected = (id) => {\r\n        setComics(id);\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Comics page</title>\r\n                <meta name=\"description\" content=\"Page with list of our comics\" />\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <ComicsList\r\n                    onComicsSelected={onComicsSelected}\r\n                    comicsId={selectedComics} />\r\n            </ErrorBoundary>\r\n        </>\r\n    )\r\n}\r\n\r\nComponent.displayName = \"ComicsPage\";","const Spinner = (props) => {\r\n    return (\r\n        <svg style={{ margin: `${props.margin}`, background: 'none', display: 'block' }} width={props.size} height={props.size} viewBox=\"0 0 128 128\" space=\"preserve\">\r\n            <path fill=\"#9f0013\" d=\"M64.4 16a49 49 0 0 0-50 48 51 51 0 0 0 50 52.2 53 53 0 0 0 54-52c-.7-48-45-55.7-45-55.7s45.3 3.8 49 55.6c.8 32-24.8 59.5-58 60.2-33 .8-61.4-25.7-62-60C1.3 29.8 28.8.6 64.3 0c0 0 8.5 0 8.7 8.4 0 8-8.6 7.6-8.6 7.6z\">\r\n                <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 64 64\" to=\"360 64 64\" dur=\"1800ms\" repeatCount=\"indefinite\"></animateTransform>\r\n            </path>\r\n        </svg>\r\n    )\r\n}\r\nSpinner.defaultProps = { size: \"64px\", margin: '0 auto' };\r\n\r\nexport default Spinner;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, error, clearError, request } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=4f2080802c14be696101f97dc9e2bd5f';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformAllCharacters);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        return res.data.results.map(_transformAllCharacters);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? `${char.description.slice(0, 210)}...`\r\n                : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformAllCharacters = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} pages`\r\n                : \"No information about the number of pages\",\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        }\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getCharacterByName,\r\n        getAllComics,\r\n        getComic\r\n    }\r\n\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => { setError(null) }, []);\r\n\r\n    return { loading, error, request, clearError };\r\n}"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","hasError","_createClass","key","value","error","info","console","log","this","_jsx","ErrorMessage","props","children","Component","style","display","width","height","objectFit","margin","src","img","alt","_useState","useState","_useState2","_slicedToArray","comicsList","setComicsList","_useState3","_useState4","offset","setOffset","_useState5","_useState6","newItemLoading","setNewItemLoading","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","loading","getAllComics","useEffect","onRequest","initial","then","getComicsLoaded","newComics","_toConsumableArray","lenght","items","arr","map","item","i","styleImg","thumbnail","lastIndexOf","className","tabIndex","onClick","onComicsSelected","id","onKeyDown","e","preventDefault","_jsxs","Link","to","title","price","renderItmes","spinner","Spinner","errorMessage","disabled","selectedComics","setComics","_Fragment","Helmet","name","content","ComicsList","comicsId","displayName","background","size","viewBox","space","fill","d","attributeName","type","from","dur","repeatCount","defaultProps","_useHttp","setLoading","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","stop","_x","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformAllCharacters","getCharacterByName","_ref2","_callee2","_context2","getCharacter","_ref3","_callee3","_context3","_transformCharacter","_x2","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","description","slice","path","extension","homepage","urls","wiki","comics","_comics$textObjects$","pageCount","language","textObjects","prices"],"sourceRoot":""}