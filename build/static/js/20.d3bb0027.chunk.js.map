{"version":3,"file":"static/js/20.d3bb0027.chunk.js","mappings":"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","sources":["Components/errorBoundary/ErrorBoundary.js","Components/errorMessage/ErrorMessage.js","Components/randomChar/RandomChar.js","Components/charList/CharList.js","Components/skeleton/Skeleton.js","Components/charInfo/CharInfo.js","Components/searchForm/SearchForm.js","Components/pages/MainPage.js","Components/spinner/Spinner.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["// Предохранитель (Error Boundary)\r\n\r\nimport { Component } from \"react\";\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    static getDerivedStateFromError() {\r\n        // Обновите состояние так, чтобы следующий рендер показал запасной интерфейс.\r\n        return { hasError: true }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        console.log(error, info)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // Здесь можно рендерить запасной интерфейс\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt=\"Error message\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './randomChar.scss';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { loading, error, clearError, getCharacter } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // const timerId = setInterval(updateChar, 15000);\r\n\r\n        // return () => {\r\n        //     clearInterval(timerId);\r\n        // }\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const view = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n\r\n    return (\r\n        <div className=\"random-char\">\r\n            {spinner}\r\n            {errorMessage}\r\n            {view}\r\n            <div className=\"rendom-char__cta-block cta-block\">\r\n                <div className='cta-block__text'>\r\n                    <div >Random character for today!</div>\r\n                    <div >Do you want to get to know him better?</div>\r\n                    <div >Or choose another one</div>\r\n                </div>\r\n\r\n                <div className=\"cta-block__button\">\r\n                    <button onClick={updateChar} className=\"cta-block__btn button button_main-color\">TRY IT</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = char;\r\n    const imgStyle = thumbnail.lastIndexOf(\"image_not_available\") !== -1 ? { objectFit: 'contain' } : { objectFit: 'cover' }\r\n\r\n    return (\r\n        <div className=\"rendom-char__block block\">\r\n            <div className=\"block__image\">\r\n                <img\r\n                    style={imgStyle}\r\n                    src={thumbnail}\r\n                    alt=\"random character\" />\r\n            </div>\r\n            <div className=\"block__descr\">\r\n                <h2 className=\"block__title\">{name}</h2>\r\n                <div className=\"block__text\">\r\n                    {description}\r\n                </div>\r\n                <div className=\"block__button\">\r\n                    <a href={homepage} className=\"block__btn button button_main-color\">HOMEPAGE</a>\r\n                    <a href={wiki} className=\"block__btn button button_grey\">WIKI</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect, createRef } from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [offset, setOffset] = useState(210);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { charId, onCharSelected } = props\r\n\r\n    const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest();\r\n        window.addEventListener('scroll', onScroll);\r\n\r\n        // getLocalOffset();\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (newItemLoading && !charEnded) {\r\n            onRequest();\r\n        }\r\n    }, [newItemLoading])\r\n\r\n    // useEffect(() => {\r\n    //     console.log('write offset:' + offset);\r\n\r\n    //     localStorage.setItem('offset', offset - 9)\r\n    // }, [offset])\r\n\r\n    // const getLocalOffset = () => {\r\n    //     const local = localStorage.getItem('offset');\r\n\r\n    //     if (!local) {\r\n    //         return;\r\n    //     }\r\n    //     console.log('read local: ' + local);\r\n\r\n    //     let i = offset;\r\n\r\n    //     while (i < local) {\r\n    //         i = i + 9;\r\n    //         console.log(offset);\r\n\r\n    //         onRequest(i)\r\n    //     }\r\n\r\n    // }\r\n\r\n    const onScroll = () => {\r\n        if (window.innerHeight + window.scrollY - 100 >= document.body.offsetHeight) {\r\n            setNewItemLoading(true);\r\n        }\r\n    };\r\n\r\n    const onRequest = () => {\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .finally(() => setNewItemLoading(false));\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(newCharList.length < 9 ? true : false);\r\n    }\r\n\r\n    function renderItem(arr) {\r\n        const items = arr.map((item) => {\r\n            const styleImg = item.thumbnail.lastIndexOf(\"image_not_available\") !== -1 ? { objectFit: 'unset' } : { objectFit: 'cover' }\r\n            const clazz = charId === item.id ? 'char-list__item_selected' : '';\r\n            const nodeRef = createRef(null);\r\n            return (\r\n                <CSSTransition nodeRef={nodeRef} key={item.id} timeout={500} classNames=\"char-list__item\">\r\n                    <li ref={nodeRef}\r\n                        tabIndex={0}\r\n                        onClick={() => onCharSelected(item.id)}\r\n                        onKeyDown={e => {\r\n                            if (e.key === ' ' || e.key === 'Enter') {\r\n                                e.preventDefault();\r\n                                onCharSelected(item.id)\r\n                            }\r\n                        }}\r\n                        className={`char-list__item ${clazz}`}>\r\n                        <div className=\"char-list__image\">\r\n                            <img style={styleImg} src={item.thumbnail} alt={item.name} />\r\n                        </div>\r\n                        <div className=\"char-list__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        })\r\n        return (\r\n            <ul className=\"char-list__box\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItem(charList);\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n\r\n    return (\r\n        <div className=\"char-list\">\r\n            {spinner}\r\n            {errorMessage}\r\n            {items}\r\n            <button\r\n                className=\"char-list__btn button button_main-color button_long\"\r\n                disabled={newItemLoading}\r\n                style={{ 'display': charEnded ? 'none' : 'block' }}\r\n                onClick={() => setNewItemLoading(true)}\r\n            >LOAD MORE</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Sceleton from '../skeleton/Skeleton';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { loading, error, clearError, getCharacter } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props;\r\n\r\n        if (!charId) {\r\n            return\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const sceleton = (char || loading || error) ? null : <Sceleton />;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n    return (\r\n\r\n        <div className=\"char-info\">\r\n            {sceleton}\r\n            {spinner}\r\n            {errorMessage}\r\n\r\n            {content}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n    const imgStyle = thumbnail.lastIndexOf(\"image_not_available\") !== -1 ? { objectFit: 'contain' } : { objectFit: 'cover' };\r\n    const nodeRef = useRef(null);;\r\n    let comicsList = \"The list of comics is missing for the selected character\";\r\n\r\n    if (comics.length !== 0) {\r\n        comicsList = comics.slice(10).map((item, i) => (\r\n            //item.resourceURI.match(/\\/\\d+/g)[0].slice(1);\r\n            <li key={i} className=\"char-info__comic-book-title\">\r\n                <Link to={`/comics/${item.resourceURI.slice(item.resourceURI.lastIndexOf(\"/\") + 1)}`}>{item.name}</Link>\r\n            </li>\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <CSSTransition nodeRef={nodeRef} in={true} timeout={500} classNames=\"char-info\" appear >\r\n            <div ref={nodeRef}>\r\n                <div className=\"char-info__character\">\r\n                    <div className=\"char-info__image\">\r\n                        <img style={imgStyle} src={thumbnail} alt={name} />\r\n                    </div>\r\n                    <div className=\"char-info__wraper\">\r\n                        <h2 className=\"char-info__title\">{name}</h2>\r\n\r\n                        <a href={homepage} className=\"char-info__btn button button_main-color\">HOMEPAGE</a>\r\n                        <a href={wiki} className=\"char-info__btn button button_grey\">WIKI</a>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"char-info__descr\">\r\n                    {description}\r\n                </div>\r\n                <div className=\"char-info__comics\">\r\n                    <h3 className=\"char-info__subtitle\">Comics:</h3>\r\n                    <ul className=\"char-info__list\">\r\n                        {comicsList}\r\n                    </ul>\r\n                </div >\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n}\r\n\r\nexport default CharInfo;","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form, Field, ErrorMessage, useFormikContext } from \"formik\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport * as Yup from \"yup\";\r\nimport './searchForm.scss';\r\n\r\nconst ClearMsg = (props) => {\r\n    const { values } = useFormikContext();\r\n\r\n    useEffect(() => {\r\n        props.setChar(null);\r\n    }, [values]);\r\n\r\n    return null;\r\n};\r\n\r\nconst SearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { loading, error, clearError, getCharacterByName } = useMarvelService();\r\n\r\n    const searchChar = (name) => {\r\n        clearError();\r\n        setChar(null);\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const errorMsg = error ? <div className=\"search__error\">{error}</div> : null;\r\n    const spinner = loading ? <Spinner size=\"24px\" margin='25px auto 0 auto' /> : null;\r\n\r\n    const content = !char ? null : char.length > 0 ?\r\n        <div className=\"search__block\">\r\n            <div className=\"search__label search__label_green\">There is! Visit page?</div>\r\n            <Link\r\n                className='search-btn button button_grey'\r\n                to={`/character/${char[0].id}`}\r\n                tabIndex={0}\r\n            >to page</Link>\r\n        </div> :\r\n        <div className=\"search__error\">The character was not found. Check the name and try again</div>\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: ''\r\n            }}\r\n            validationSchema={Yup.object({\r\n                name: Yup.string().required(\"This field is required\")\r\n            })}\r\n            onSubmit={({ name }) => searchChar(name)}>\r\n            <Form className=\"search\">\r\n                <label htmlFor=\"name\" className=\"search__label\">Or find a character by name:</label>\r\n                <div className=\"search__block\">\r\n                    <Field\r\n                        id=\"name\"\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        className=\"search__input\"\r\n                        placeholder='Enter name'\r\n                    />\r\n                    <button\r\n                        type=\"submit\"\r\n                        className='search-btn button button_main-color'>find</button>\r\n                </div>\r\n                <ErrorMessage className=\"search__error\" name=\"name\" component=\"div\" />\r\n                {errorMsg}\r\n                {spinner}\r\n                {content}\r\n                <ClearMsg setChar={setChar} />\r\n            </Form>\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport SearchForm from '../searchForm/SearchForm';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\n\r\nexport function Component() {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Marvel information portal</title>\r\n                <meta name=\"description\" content=\"Marvel information portal\" />\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"App__page\">\r\n                <ErrorBoundary>\r\n                    <CharList\r\n                        onCharSelected={onCharSelected}\r\n                        charId={selectedChar} />\r\n                </ErrorBoundary>\r\n                <div className=\"App__descr\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <SearchForm />\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nComponent.displayName = \"MainPage\";","const Spinner = (props) => {\r\n    return (\r\n        <svg style={{ margin: `${props.margin}`, background: 'none', display: 'block' }} width={props.size} height={props.size} viewBox=\"0 0 128 128\" space=\"preserve\">\r\n            <path fill=\"#9f0013\" d=\"M64.4 16a49 49 0 0 0-50 48 51 51 0 0 0 50 52.2 53 53 0 0 0 54-52c-.7-48-45-55.7-45-55.7s45.3 3.8 49 55.6c.8 32-24.8 59.5-58 60.2-33 .8-61.4-25.7-62-60C1.3 29.8 28.8.6 64.3 0c0 0 8.5 0 8.7 8.4 0 8-8.6 7.6-8.6 7.6z\">\r\n                <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 64 64\" to=\"360 64 64\" dur=\"1800ms\" repeatCount=\"indefinite\"></animateTransform>\r\n            </path>\r\n        </svg>\r\n    )\r\n}\r\nSpinner.defaultProps = { size: \"64px\", margin: '0 auto' };\r\n\r\nexport default Spinner;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, error, clearError, request } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=4f2080802c14be696101f97dc9e2bd5f';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformAllCharacters);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        return res.data.results.map(_transformAllCharacters);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? `${char.description.slice(0, 210)}...`\r\n                : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformAllCharacters = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} pages`\r\n                : \"No information about the number of pages\",\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        }\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getCharacterByName,\r\n        getAllComics,\r\n        getComic\r\n    }\r\n\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => { setError(null) }, []);\r\n\r\n    return { loading, error, request, clearError };\r\n}"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","hasError","_createClass","key","value","error","info","console","log","this","_jsx","ErrorMessage","props","children","Component","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","lastIndexOf","_jsxs","className","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","clearError","getCharacter","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","spinner","Spinner","errorMessage","view","onClick","charList","setCharList","_useState3","_useState4","offset","setOffset","_useState5","_useState6","newItemLoading","setNewItemLoading","_useState7","_useState8","charEnded","setCharEnded","charId","onCharSelected","getAllCharacters","onRequest","window","addEventListener","onScroll","removeEventListener","innerHeight","scrollY","document","body","offsetHeight","onCharListLoaded","finally","newCharList","_toConsumableArray","items","arr","map","item","styleImg","clazz","nodeRef","createRef","CSSTransition","timeout","classNames","ref","tabIndex","onKeyDown","e","preventDefault","TransitionGroup","component","renderItem","disabled","_Fragment","comics","useRef","comicsList","slice","i","Link","to","resourceURI","in","appear","sceleton","Sceleton","content","ClearMsg","values","useFormikContext","getCharacterByName","errorMsg","size","Formik","initialValues","validationSchema","Yup","required","onSubmit","searchChar","Form","htmlFor","Field","type","placeholder","selectedChar","Helmet","RandomChar","CharList","CharInfo","SearchForm","decoration","displayName","background","viewBox","space","fill","d","attributeName","from","dur","repeatCount","defaultProps","_useHttp","setLoading","setError","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","headers","response","data","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","stop","_x","useHttp","_apiBase","_apiKey","res","results","_transformAllCharacters","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_transformCharacter","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}